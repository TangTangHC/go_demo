// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: hello.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GretterClient is the client API for Gretter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GretterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Pong, error)
}

type gretterClient struct {
	cc grpc.ClientConnInterface
}

func NewGretterClient(cc grpc.ClientConnInterface) GretterClient {
	return &gretterClient{cc}
}

func (c *gretterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/Gretter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gretterClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/Gretter/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GretterServer is the server API for Gretter service.
// All implementations must embed UnimplementedGretterServer
// for forward compatibility
type GretterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	Ping(context.Context, *emptypb.Empty) (*Pong, error)
	mustEmbedUnimplementedGretterServer()
}

// UnimplementedGretterServer must be embedded to have forward compatible implementations.
type UnimplementedGretterServer struct {
}

func (UnimplementedGretterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGretterServer) Ping(context.Context, *emptypb.Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGretterServer) mustEmbedUnimplementedGretterServer() {}

// UnsafeGretterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GretterServer will
// result in compilation errors.
type UnsafeGretterServer interface {
	mustEmbedUnimplementedGretterServer()
}

func RegisterGretterServer(s grpc.ServiceRegistrar, srv GretterServer) {
	s.RegisterService(&Gretter_ServiceDesc, srv)
}

func _Gretter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GretterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gretter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GretterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gretter_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GretterServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gretter/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GretterServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Gretter_ServiceDesc is the grpc.ServiceDesc for Gretter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gretter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Gretter",
	HandlerType: (*GretterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Gretter_SayHello_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Gretter_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}
